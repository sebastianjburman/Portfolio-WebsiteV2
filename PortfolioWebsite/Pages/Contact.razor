@using PortfolioWebsite.Models
@page "/Contact"
@inject IJSRuntime JsRuntime

<PageTitle>Contact</PageTitle>
<div class="contactPageContainer">
    <h2>Get in Touch</h2>
    <div class="emailLinkContainer">

        <img class="emailIconContainer" src="Svgs/email.svg" />
        <a href="mailto: sebastianjburman@gmail.com">sebastianjburman@gmail.com</a>
        <p>Email Me</p>
    </div>
    <h2>Contact Form</h2>
    <div class="contactFormContainer">
        @if (loading)
        {
            <h3>Sending</h3>
            <img class="loadingSvg" src="Svgs/loading.svg">  
        }
        else if (!loading && emailSent){
            <h2>Email Sent</h2>
            <img class="emailSentSvg" src="Svgs/mailsent.svg">
            <button @onclick='()=>emailSent = false'>New Email</button>
        }
        else if(!loading && !emailSent)
        {
            <input class="normalInput" placeholder="Name*" type="text" @bind="Name" />
            <input class="normalInput" placeholder="Email*" type="text" @bind="Email" />
            <input class="normalInput" placeholder="Subject*" type="text" @bind="Subject"/>
            <textarea class="messageInput" placeholder="Message*" type="text" @bind="Message" />
            <button @onclick="SendEmail">Send Email</button>
        }
    </div>

</div>

@code {
    private bool loading = false;
    private bool emailSent = false;
    private string? Name { get; set; }
    private string? Email { get; set; }
    private string? Subject { get; set; }
    private string? Message { get; set; }


    public async void SendEmail()
    {
        if (Name == null || Email == null || Subject == null || Message == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please Fill Out Entire Form");
            return;
        }
        loading = true;
        EmailSender emailSender = new EmailSender();
        bool response = await emailSender.SendEmail(Name, Email, Subject, Message);

        if (response)
        {
            Name  = "";
            Email = "";
            Subject = "";
            Message = "";
            loading = false;
            emailSent = true;
            await Task.Delay(1); //Work around for clearing values after async
            StateHasChanged();
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Error Sending Email.");
        }
    }

}
